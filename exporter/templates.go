// Code generated by go-bindata.
// sources:
// exporter/templates/cat1/_address.xml
// exporter/templates/cat1/_author.xml
// exporter/templates/cat1/_id.xml
// exporter/templates/cat1/_measures.xml
// exporter/templates/cat1/_organization.xml
// exporter/templates/cat1/_providers.xml
// exporter/templates/cat1/_record_target.xml
// exporter/templates/cat1/_reporting_parameters.xml
// exporter/templates/cat1/_telecom.xml
// exporter/templates/cat1/cat1.xml
// exporter/hqmfr2_template_oid_map.json
// exporter/hqmf_template_oid_map.json
// DO NOT EDIT!

package exporter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCat1_addressXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\x3d\x0a\x03\x21\x10\x85\x7b\x4f\x31\xec\x01\xdc\x0b\x18\x21\x6c\x9b\x6e\x49\x93\x4e\xe2\x10\x84\xa0\x8b\xba\x45\x18\xe6\xee\xf1\x67\x8a\x40\xac\x66\xbe\x37\xef\x3d\x34\xce\xfb\x0c\x67\xc1\xcb\x42\x04\xfa\x5e\x10\x98\x17\xab\xa0\x3d\xa2\xec\xe2\x0b\x41\xef\x35\x23\x56\xe6\x41\x01\x4c\x19\xfb\xb5\x39\xb1\x94\x5b\x88\x68\x89\x34\xb3\x59\xff\x05\x09\xc2\xe8\xc5\x6e\x9e\xa1\x7e\x6c\xef\xda\xda\x00\xdd\x35\x88\x92\x64\x57\x71\xa8\x7b\x9f\x60\x86\x76\x36\xf5\x23\xb5\xed\xbd\x25\x3f\x8f\x1e\xe1\x18\x27\x3f\x58\x4a\xd2\x19\x6b\x96\x9e\x39\xcf\x2a\xe1\xca\xac\xfd\xe3\x56\x7d\x03\x00\x00\xff\xff\x70\x10\x66\xec\x00\x01\x00\x00")

func templatesCat1_addressXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_addressXml,
		"templates/cat1/_address.xml",
	)
}

func templatesCat1_addressXml() (*asset, error) {
	bytes, err := templatesCat1_addressXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_address.xml", size: 256, mode: os.FileMode(420), modTime: time.Unix(1454511475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_authorXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x52\x4d\x4b\xc4\x30\x10\xbd\xef\xaf\x18\x7b\x14\x9a\xe2\xbd\x16\x0a\x22\x0a\xbb\x2a\xb8\x17\x4f\x32\x6e\xa6\xdd\x40\x9b\x2c\x49\x5a\x3f\x4a\xff\xbb\x69\xd2\xed\x6e\xd7\x82\xb7\xcc\xbc\x37\x2f\x2f\xf3\x92\x5e\xc5\x31\xbc\x3e\xe4\xeb\x35\xec\xb1\x25\xb8\x61\xec\x1a\xb0\xb1\x7b\xa5\x19\x6c\xf2\x37\xf8\x20\xe0\xd4\x8a\x1d\x81\xd2\x70\x20\x6d\x94\x64\x10\xc7\xd9\x2a\x0d\xac\x6c\x05\x90\x5a\x51\x13\xb4\x58\x35\x74\x1b\x75\x1d\xdb\xba\xb2\xef\x23\x48\x3c\x88\xc6\x88\x52\x12\xcf\x27\x7e\xd7\x69\x94\x25\x01\x7b\xe4\xa6\xef\x5d\x63\x68\x59\xaa\x0f\x15\x5a\x82\xe8\x5d\x70\xf6\x55\x57\x11\x30\x0f\x76\x1d\x49\x3e\x9e\xc6\xb9\x9c\x73\x4d\xc6\xd0\xe2\x34\x06\xf0\x1f\x89\x2d\x55\xb4\x53\xf5\xa2\x82\x0d\xd8\x92\x82\x3f\x8a\x02\xd8\x4b\x58\xc5\xbd\xd0\xc6\x8e\x1a\xd3\x4b\x03\x96\xf9\xa6\x6b\x4b\xac\xe9\x58\xb8\xb2\x14\x2d\xc9\xcc\xad\x69\x2e\x91\x26\x01\x38\x11\x0b\xac\x45\xf5\x7d\xc6\x5c\x63\x20\x8e\xc0\x51\x3f\x39\x5d\x90\x26\x7f\x3d\x38\xeb\x95\x21\x18\x4c\xdf\xf9\x24\xd9\x46\x71\xaa\x2e\x4d\x87\x78\x84\x2c\x03\x69\xf2\x91\xd6\x28\x9b\x02\x77\xb6\xd1\xa4\xfd\xe4\xd3\x70\x9d\x73\x35\x57\x4b\x93\x65\xe2\xa4\x63\x54\x61\x3f\x51\xd3\xc5\xf8\x50\x0e\xd3\x33\x78\x05\xf3\xd7\x2c\x98\x9b\x25\x72\x16\x9e\xd2\x25\x4a\xf1\x83\x56\xb8\x8d\x85\x04\x9f\xcf\x5a\xfe\xd9\x97\xc2\xee\x37\x27\xc7\xef\xfc\x1b\x00\x00\xff\xff\x43\xb1\xa7\x90\x12\x03\x00\x00")

func templatesCat1_authorXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_authorXml,
		"templates/cat1/_author.xml",
	)
}

func templatesCat1_authorXml() (*asset, error) {
	bytes, err := templatesCat1_authorXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_author.xml", size: 786, mode: os.FileMode(420), modTime: time.Unix(1454511475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_idXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xc9\x4c\x51\xa8\xae\xce\x4c\x53\xd0\x0b\xca\xcf\x2f\xa9\xad\x2d\x02\x92\xb6\x4a\xd5\xd5\x50\x2e\x90\x95\x9a\x97\x52\x5b\xab\x90\x5a\x51\x92\x9a\x57\x9c\x99\x9f\x07\x96\x74\x85\xf1\x80\x2a\x14\xf4\xed\xb8\x00\x01\x00\x00\xff\xff\xc7\x76\x77\x01\x46\x00\x00\x00")

func templatesCat1_idXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_idXml,
		"templates/cat1/_id.xml",
	)
}

func templatesCat1_idXml() (*asset, error) {
	bytes, err := templatesCat1_idXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_id.xml", size: 70, mode: os.FileMode(420), modTime: time.Unix(1454511475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_measuresXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x6f\x6f\xfa\x36\x10\x7e\xbf\x4f\xe1\x45\xda\x9b\x6a\x18\x02\xfd\xc3\xaa\x80\xd4\x41\xbb\x22\x51\x10\xd0\xf6\xbd\x89\x8f\x12\x29\x38\xcc\x71\xba\x31\xc4\x77\xdf\x39\x89\x13\x87\x40\xdb\x75\xbf\x0a\x55\x71\x72\xbe\xe7\x9e\xbb\xc7\x4f\xe2\xf9\xd1\x66\x1b\x09\x10\xaa\xff\x13\x21\x5e\x0c\xbe\x0a\x22\xa1\xaf\x71\xf5\x73\xa3\x91\x5e\x10\x72\xf1\x7f\xff\xf2\x3c\x4f\xc0\xe2\x44\x02\x59\x64\x38\x3f\x34\x7b\xa3\x51\x96\x4d\x9e\xd7\x41\x4c\xf0\xa7\xd6\x40\x14\x6c\xb6\x21\x53\x30\xe2\x64\x15\xc9\xe3\x1a\xca\x7d\x56\x9c\x8c\x22\xd5\x73\xda\xd4\xbd\xa6\xdd\xcb\x16\x75\xa9\xeb\x76\xba\xdd\x0e\x75\x5b\xb4\x8d\xbf\x4b\xda\xa6\x6d\xa7\xf9\x3d\xbc\xd9\xf0\xe9\xbb\x98\x9d\xb3\x98\xe3\xe9\x68\x32\x20\x7e\xc4\x21\xc5\x74\x0c\x28\x8f\xfc\x64\x83\xd3\x75\x68\x16\x1e\x2b\xb6\xcb\x76\xc4\x6c\x93\xc5\xb2\x30\x24\x9b\x3c\x3c\x9f\x3f\x91\xf0\x67\x12\x48\xe0\x64\xb9\x23\xb3\xf9\xf0\x4e\xef\x13\x9c\x49\x5e\x56\x9e\x62\xe9\x7f\x3d\xe7\xea\xca\xed\x5e\x37\x5c\x27\x5d\x2e\x76\x31\x92\x3a\x45\xe4\x9a\xba\x45\xfd\x2a\x50\x21\xf4\x8f\x5a\xe3\x35\xb3\xdb\xa6\x35\x7f\xab\x7e\xae\x10\x4f\xb1\x65\x08\x64\x19\x49\x0e\xb2\xe7\x20\xd4\x5f\x01\x57\x6b\xbc\x6a\xb5\x7e\x71\x4c\x94\x8e\x5b\x03\xe3\xe5\x5a\xdf\x91\xf6\x32\x0d\xe9\x83\x01\x7e\xd6\x78\x08\xbb\xae\xc7\xbc\x82\x8c\x75\x2b\x26\x90\x28\xc9\x42\x32\xe2\xd8\xc6\x60\x15\x80\x3c\x1d\x5f\xe4\x2c\x36\x26\x9b\xe5\xb9\x60\x13\xb3\xd8\x82\x8f\x39\xfd\x0f\xb2\xe3\xda\x62\xa0\x9f\x56\x18\x7a\x6a\x19\xf1\x9d\xbd\x61\xbf\x97\x4c\xbc\x01\xa1\x87\xc3\xc7\x7d\xe0\xfd\xfd\x9e\x4e\x50\x06\x87\x03\xa6\xe5\x27\x1f\x3f\xce\x9e\x1e\x16\xa0\x46\xc3\x4f\x62\x72\x42\x19\xe7\x4f\x62\xcf\x27\x3b\xbe\x5b\xe5\xae\xa9\x81\xe0\x16\x2d\x7c\x6e\xb3\xc7\xa5\x96\x49\xae\x9f\x66\x29\xa0\xf4\xb8\xb8\x94\x5e\x90\xa9\x7c\x63\x22\xf8\x07\xab\xfd\x95\x00\xf3\xd7\x28\x59\xa1\x58\x20\x02\xf1\x46\x18\xca\x7e\x05\x12\x84\x8f\x67\x38\x22\x4c\x90\x62\xa6\x46\xf5\xc7\xbd\xf5\x70\x6a\xb2\xc4\x8f\x4c\x76\xe2\x87\x2c\x8e\x07\xe9\xe9\x18\x8c\x5f\x16\xcf\xf7\x73\x87\x6c\xa2\x88\x67\xb7\xee\x5f\x27\xb6\x68\xbf\x68\x20\xf3\xa2\x3a\x53\x4e\xd6\xb7\xff\x60\x21\x1d\xfa\x5b\xd7\x9c\xc1\xaf\x40\x43\x1d\xdb\xb6\xaf\xef\xe0\xdf\x54\xf0\x03\x4e\x70\x4a\x20\xb4\x78\x7a\x0e\x0a\x44\x8b\xa3\x12\x81\xce\xa3\x92\xb4\x95\xb9\xdb\xe8\x37\x56\x08\x0a\x78\x8d\xc8\xa0\x9c\x65\x10\xff\x8e\x93\xc2\xf9\xea\xec\x52\xe0\xf9\x2d\x66\x1b\x57\xcb\xb7\x66\xbe\xdb\x42\x36\x9f\xf9\xfd\xc3\xdc\xa9\x08\xd1\xa4\x19\xe6\x7e\x6a\x0f\x78\x38\x1d\x9c\x1f\x6e\x51\xdc\xe2\xf1\x6e\x3c\xbe\xad\x34\xfb\x3d\x77\x81\xd8\xb8\x40\x50\xb8\x40\xa5\xfb\xb7\x64\x96\xb0\x30\x50\xbb\x7c\x6d\x8a\x68\x62\xf7\x02\xa5\xb3\x31\xf2\xc7\xcb\x68\x68\xf3\x32\xdd\x3d\x37\x92\x4b\x7a\xd3\xe9\x3a\x47\xcd\x37\xa7\xd3\xee\xac\x45\x60\xfa\x32\x1e\x56\xd5\xa2\xed\x93\x44\xab\x74\x51\x3b\x2c\x96\x42\xf0\x20\xda\x5e\x63\x39\x7b\x0d\xe0\x16\x5f\x42\x0a\xb5\x94\x43\x14\x59\x4d\xb3\x44\xee\xc7\xc8\xad\x8e\x94\x6d\xcd\x38\x57\xdd\xeb\x24\x25\x9b\x4b\x8c\xaf\x3c\xdd\x7d\x4c\x5d\xb3\x72\x91\xda\x5a\x1d\xee\xdd\x76\x3d\xf2\xce\xc2\x04\x0a\xdc\x23\x47\xac\xe2\x7b\xcd\x63\x41\xd9\x16\x5f\x48\xb2\x34\xb6\xc2\x59\x8c\xb9\x59\xc6\x53\xba\xa2\xd7\x2c\x3e\xe0\xbc\xa6\xf5\x65\xf7\x6f\x00\x00\x00\xff\xff\x6f\x5b\x29\x26\xe6\x09\x00\x00")

func templatesCat1_measuresXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_measuresXml,
		"templates/cat1/_measures.xml",
	)
}

func templatesCat1_measuresXml() (*asset, error) {
	bytes, err := templatesCat1_measuresXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_measures.xml", size: 2534, mode: os.FileMode(420), modTime: time.Unix(1454511475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_organizationXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xc1\x6a\xc4\x30\x0c\x44\xef\xfd\x0a\x75\xef\xce\xfe\x80\x59\x28\x3d\xed\x65\x0f\x25\xf7\x22\x62\x35\x08\x12\x39\x6b\x2b\xd0\xd6\xf8\xdf\xeb\xd8\xd0\x76\xc1\x37\x4b\x63\xcd\x3c\xc6\xa6\x34\x8c\x38\xdf\x70\xa5\x9c\x2f\x4f\x00\xf6\xd9\x18\x78\xa3\x2d\x50\x24\xd1\x08\xbb\xf0\x7d\x27\x08\x34\x73\xd4\xf0\x05\x3e\xcc\x28\xfc\x8d\xca\x5e\x60\xbc\xde\xc0\x98\xe3\x2c\xa5\x80\x32\x13\x0c\x57\x17\x73\x2e\x8b\x63\xa5\xb4\x6e\x0b\x2a\xc1\xe9\x9d\xdd\xf0\xb9\x2e\x27\x18\xaa\x98\x12\x89\xab\xaf\x1a\xf7\xea\x45\x91\x25\x82\x14\x0c\x30\x10\x37\x9a\xf8\x83\xa7\xbf\x54\xf1\x5a\x86\xfb\xce\x81\x5c\x0b\xb4\xc7\xdf\x4b\xa1\x6f\xe8\xf6\x5c\xe7\xff\x24\x23\x2d\x34\xf9\xb5\x8b\xa3\x4d\xeb\x33\xfd\x3a\xbc\x38\x57\x6a\x88\xd4\xb5\xc0\x26\xf6\x2c\xec\xf9\xb1\xd5\x9f\x00\x00\x00\xff\xff\xf2\x1b\x72\xb3\x65\x01\x00\x00")

func templatesCat1_organizationXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_organizationXml,
		"templates/cat1/_organization.xml",
	)
}

func templatesCat1_organizationXml() (*asset, error) {
	bytes, err := templatesCat1_organizationXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_organization.xml", size: 357, mode: os.FileMode(420), modTime: time.Unix(1454511475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_providersXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x4d\x73\xda\x30\x10\xbd\xf3\x2b\xb6\x3e\x07\x1b\x03\x21\x39\xb8\xcc\x74\x08\x99\xc9\x85\x78\x52\x2e\x3d\x6a\xac\x35\xd6\xd4\x48\x54\x96\x49\x53\x86\xff\xde\x95\xc1\x89\x15\x1c\x33\x34\x65\x38\xd8\xd2\x7e\xbd\xb7\xfb\x16\x22\xae\x92\x72\x8d\xd2\x30\x23\x94\x7c\x4c\xc1\xbc\x6c\x70\xa6\x38\x7e\xf5\xee\x1e\x67\xde\xb4\x07\x10\x15\xa8\xb7\x22\xc1\xf9\x96\xcc\x20\xc9\x59\x51\x1c\x0c\xe2\x59\xfc\xe4\x4d\x21\xfa\xd2\xef\x43\xc2\x34\xc2\x46\xab\xad\x28\x28\x0e\xf4\xfb\xd6\x73\xb7\x13\x29\xf8\xb1\x3d\xe5\xa8\x63\xd4\xa9\xd2\x6b\x26\x13\x2c\xf6\x7b\xba\xb6\x06\x9a\xc9\x15\xb6\xdb\xc0\xd1\x88\x2a\xc0\x34\xc5\xc4\x88\x2d\x2e\xc5\x1a\xa7\xc7\x53\x3a\xcf\xd5\x33\x6c\x59\x5e\x52\x31\xbb\x9d\xa1\xbb\xa5\xba\xb7\xee\x06\xfc\xef\x86\x69\x73\xc7\x0c\x82\x37\x1c\x0c\x26\x83\x70\x30\xf4\xf6\x7b\x2f\x68\x78\x67\x62\x95\x7d\xe4\x3e\x97\xbc\xc3\x39\x0a\x5a\x2b\xaa\x98\xf8\xa1\x4a\x62\x43\x82\x90\x49\x5e\x72\x84\x75\x99\x1b\xb1\xc9\x89\x9d\x03\x36\xd4\xc5\x15\x20\x4b\x32\x78\x16\x26\x03\xb2\x5c\xc4\x0f\x57\xb0\x7c\x58\x5c\xc1\x6c\xb6\xf0\x8f\xdc\x55\xf1\x5e\x5d\x1a\x6d\x89\x9f\xee\xbd\x06\x08\xe3\x30\xf2\x59\x4e\x3e\xc5\x8a\xe5\xc5\x2d\x27\xa2\x59\x11\x2b\x89\x7c\x2e\x8d\x30\x2f\xcd\x3c\x27\xad\xf7\x67\x77\xdf\x1e\x38\x8d\x98\xe0\x82\x38\x7a\x6d\x7e\x6d\x4e\xa3\x24\xc9\xfc\x49\x29\x43\xf9\xfd\x70\xe2\xdf\x8e\x07\x7e\xe8\x87\xe1\xe8\xf6\x76\xe4\x8f\x7d\x5b\x8c\xe3\x43\xf9\x05\x07\x4d\x0e\x16\x49\xe5\x49\xe5\x02\xfe\x36\x28\xed\x94\x56\xa7\xf3\xfa\xcd\x5e\x39\x4c\xd8\xa4\x28\xb9\x13\xf4\xf4\x24\xd2\xb8\xd1\x58\x50\xdd\xc8\x1f\xf5\x8a\x49\xf1\xa7\x92\xd2\xfb\x48\x17\xa1\x3d\xe2\xc5\x5f\x17\xe2\x6d\x22\x6e\x77\xb9\x00\x7d\x1b\xda\x56\x06\x82\xb3\x14\x44\x41\xfb\x20\x44\xc1\xeb\x84\x4f\x7b\x6e\x74\x7a\xca\x0b\xac\x1e\x2b\x59\x2d\xd4\x61\xbd\x10\x77\xc0\x99\x61\x90\xaa\x52\x72\x52\x19\x98\x8c\xb4\x45\x09\xed\x76\xd2\x98\x28\xcd\xeb\xbc\x9b\xd2\x18\x21\x57\xd6\x88\xec\xd9\x4f\x7c\x0b\x71\x10\x59\xdb\x62\x69\x0a\x88\xc6\x7c\x38\xb8\x09\x27\xf5\x8c\x77\x89\xc3\xbe\x2c\xc8\xf5\x54\x1b\x2d\xdb\xe2\x7f\x6e\x8a\x33\x5b\xc2\xd9\x10\x5d\xe0\xfe\x15\x9e\x2b\xfb\x0f\x24\x5f\x01\x5e\x66\xa2\x00\xfa\x56\x1d\xab\x3b\x41\x98\x9a\x2b\xaf\x73\x7e\x27\xce\xfc\x86\xf5\xa7\x31\xba\xe7\xe5\x78\x52\x89\x6a\x98\x59\x72\x1b\xd5\x5c\xa6\xa7\x70\x38\x1a\x5f\x4f\x6e\x1c\x21\x75\x67\xa3\x2e\x5e\x90\x6d\x34\x72\xf1\x5f\x8f\x47\x43\x07\x7b\xb7\x10\xdb\x44\xf8\x4e\x80\x6f\xf2\x8b\x82\xe6\xaf\xfe\xb4\x17\x05\xef\xfe\x28\x4c\x7b\x7f\x03\x00\x00\xff\xff\x02\x2e\x2a\x74\x3b\x08\x00\x00")

func templatesCat1_providersXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_providersXml,
		"templates/cat1/_providers.xml",
	)
}

func templatesCat1_providersXml() (*asset, error) {
	bytes, err := templatesCat1_providersXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_providers.xml", size: 2107, mode: os.FileMode(420), modTime: time.Unix(1458227107, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_record_targetXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x4d\x6f\xdb\x3c\x0c\xbe\xf7\x57\x08\xba\xbe\xa8\xfc\xd5\x36\x7e\x07\x37\x40\xea\xf5\x23\x40\xda\x05\x49\x86\x01\xbb\xa9\xb1\x9a\x08\xb0\xa5\x40\x96\x8b\x76\x46\xfe\xfb\x28\xdb\x49\xe4\xda\x59\x0e\x43\x77\xd9\x24\xf2\xf1\x43\x3e\x14\xc9\x26\x52\x6c\x29\x55\xb2\xa0\x6a\xc5\xf4\xf0\x0c\xa1\x68\x43\x35\x67\x42\xcf\x64\xca\xcc\x1d\xa1\xb2\xe4\x2f\x88\x3c\xb2\x84\x2f\x69\x3a\xab\xe0\x4f\x45\xf6\xcc\xd4\x76\x5b\xf9\x7b\x11\xa3\x3c\xe7\x2b\x61\x61\x80\x99\x27\x88\xbd\x69\x26\x72\x2e\xc5\x35\x2e\xcb\x7e\x4e\x8c\x94\x94\xba\xeb\x3f\x30\x62\xe4\x0c\xf7\x91\x59\x9a\xb3\xe3\x41\x3c\x3f\xb8\xb8\xdc\x31\x4e\x53\xba\x64\x6b\x99\x26\x4c\x7d\x53\x2b\x2a\xf8\x2f\x90\x2a\x45\x9b\x4e\x24\x0d\xdb\x07\xea\xbf\x21\xb6\x69\x23\x9a\x24\x0a\x15\x39\xbb\xc6\x0f\x53\x3c\x6c\x55\x70\x04\x2e\x96\xe7\x2c\xb7\x04\x95\xa5\xa2\x62\xc5\xfa\x9d\x96\x7b\xae\x15\x63\xba\xe5\x83\x60\x79\x65\x6d\x3e\x9d\x70\xc1\x86\x50\xd6\xed\x36\x72\xba\x8e\x16\xe9\x21\xdf\x86\x68\xc9\xf5\xbb\xf9\x36\x86\xff\xcd\xf7\xd5\xfd\xac\x15\x89\xea\x8a\x7d\x6e\x0e\x75\x08\x63\xb1\x31\x1b\x09\xb6\x34\x96\x49\x05\xfc\xc9\x37\x06\x66\x19\x5b\x01\x65\x21\xb4\xaa\x63\xd6\x47\x54\xc5\x6d\xcc\x67\xfd\xb9\x76\xfb\xa1\x2b\xd4\x77\x7d\x74\x53\xa8\x94\x8b\x95\x96\x02\xcd\x12\xf2\xc7\x72\xd4\xd2\x6f\x58\xf2\x02\x4d\xf8\x51\x78\x23\xfb\x71\xd4\x91\x6b\x8b\x75\xbd\x41\xe0\xf6\x2b\xdd\xeb\xfc\x3e\xef\x88\x6b\xb5\x8d\x63\xfa\xa6\xf6\x44\x9a\xa5\x30\x12\x59\xdd\x45\x3f\xa6\x18\xbd\xd2\xb4\x80\x23\xd8\xbf\xfc\xe7\x9d\x0f\x42\xef\xdc\x1f\x78\xe7\x81\xeb\xba\xb8\x69\xc1\xdd\x58\xef\xb8\x23\x41\x33\x3b\x8d\x15\x7f\x65\xc2\x14\xfb\x8e\xab\x5c\x9b\x4a\xd7\x96\x03\xe2\x85\x66\x3c\xad\xde\x63\x42\x6b\x44\x63\xd9\x31\x3a\x36\x25\xb4\x79\xc6\x05\x87\xba\x42\xdc\x57\x76\x0f\x4a\x98\x32\xd2\xd1\x12\xfe\xa9\xa6\xbb\xb6\x99\x71\x36\xa6\xf9\x7b\xae\x59\x76\x8d\x7d\xe2\x5d\x91\xf0\xc2\x25\x1e\xf1\xbc\x20\x0c\x03\x72\x49\x3c\x1b\xf2\x04\x51\x60\x76\x26\x03\x34\xea\x09\x81\xf7\xb3\x1c\x3d\x73\xa5\xd7\x0b\x9e\xb1\x5d\x79\xca\x52\xc3\x6d\x21\xef\xa4\xca\xa8\x46\xe4\xc6\x00\x12\x78\x35\x84\x7d\xd7\xbd\x72\x3d\xd7\xc7\x90\x8e\xd3\x1e\xca\x19\xcc\xb6\xdd\x50\x0a\xee\x6d\x21\x06\x41\x8c\xc9\x68\x39\x7c\x44\x4c\xa6\xd0\xb4\x09\xcf\x37\x29\x7d\xaf\xf3\xde\xc1\xcd\x0d\xe0\xcd\x13\x77\xe4\xc5\x5f\x63\x64\x70\x88\x8a\x04\xdd\xea\xb5\xe0\xa6\xef\x4e\x55\xea\x8a\xf8\x41\x88\x7b\xb7\xd9\x4e\xcd\x9e\x0b\xd9\x9a\x58\x65\xbd\x57\xb2\xd8\xb4\xa5\xed\xe1\x96\x3e\xd4\xe2\x39\xa6\xb2\x03\xf8\xf7\x5a\x27\xb0\x19\x0b\xba\xea\x5f\xa7\x7d\x4e\xa8\x44\xda\x98\x63\x99\x65\x05\x64\x52\x2d\xf2\x61\x7b\xa9\x42\x46\x20\x55\xb3\x71\xd2\xec\xff\x6e\x76\x01\x09\x43\x38\x13\x38\xfa\x18\xd1\xea\x4f\x17\xec\x9b\x51\xa1\xd7\x52\x81\xba\xa6\x89\xc7\x8b\xf9\xd4\x89\xc3\xe0\xa0\xe3\x58\x08\x8f\x18\xc9\x1e\xb9\x30\x31\xfe\x0f\x06\xe6\x7c\x09\x36\x8f\xf8\x66\x3c\x8e\x45\x18\x3f\xdc\x3a\xd3\x38\xee\xf0\x1f\x64\x5a\xaf\xcd\x61\x80\xde\x50\xf5\xd2\x39\xc2\xe3\xdb\xc5\x1d\x46\x2e\xb2\x27\xa2\x9e\xf3\x13\x35\x3a\xb5\x91\x4f\x96\xf8\xd3\x0b\xfc\xb9\xe5\xed\x2b\x2e\x13\x36\xe6\x44\x09\xdb\x7b\xdf\x5a\xdc\xfb\x4b\xfd\xe3\x2c\x72\xda\x3f\xde\x7e\x07\x00\x00\xff\xff\xa1\xca\x6a\x79\xcc\x09\x00\x00")

func templatesCat1_record_targetXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_record_targetXml,
		"templates/cat1/_record_target.xml",
	)
}

func templatesCat1_record_targetXml() (*asset, error) {
	bytes, err := templatesCat1_record_targetXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_record_target.xml", size: 2508, mode: os.FileMode(420), modTime: time.Unix(1458227107, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_reporting_parametersXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\x61\x6f\x9b\x30\x10\xfd\xbe\x5f\x71\xf3\xe7\x01\x36\x09\x84\x46\xa4\x52\xd5\x76\x52\x26\xad\x9b\xda\xa8\xdf\x3d\xb8\x34\x96\x00\x23\xdb\xcb\x16\x45\xf9\xef\x3b\x20\x10\xaa\xa5\x5b\x23\x21\xe4\xc3\xba\xe7\xf7\xee\x3d\x9c\x66\xba\xac\x75\x85\x95\xbb\xfe\x00\x90\x5a\xcc\x9c\xd2\x55\xb3\xa6\xea\xa3\xe7\xc1\x6a\xa3\x2c\xd0\xe3\x36\x08\x0e\xcb\xba\x90\x0e\x97\x39\xac\xb5\x81\x47\xac\xb5\x71\xaa\x7a\x81\xef\xd2\xc8\x12\x1d\x1a\x0b\x47\x04\xf0\xbc\x23\xc8\xa8\xc9\x68\xed\x16\x2c\xf4\x45\xec\x27\x53\xee\x0b\x5f\x88\x49\x92\x4c\x7c\xc1\xfd\x90\xca\x99\x4f\x5b\x2c\x38\xf6\x65\x3a\x47\x68\x5e\x0b\x16\x45\x22\x99\x79\x57\xac\x2d\x9f\x76\x96\x20\xcf\xc1\xc4\xa3\x6e\xa7\x5c\x81\xd7\xe7\x18\xa6\x41\xb7\xd7\xb3\xfb\xed\xba\x25\x15\x85\xb2\x43\x41\xa5\xa2\x73\x46\x10\x35\x1a\xa5\xf3\x39\xec\xf7\x4e\x95\xb8\xd2\x9f\xb5\x29\xa5\x03\xff\xc9\x49\xe3\xee\x48\x21\xb0\xaf\xba\xfa\x04\x3c\x84\x2f\xb2\x82\x90\xf3\x18\x44\x34\xe7\xd3\x39\x8f\xc0\xe3\x33\xce\xd9\xe1\x00\xde\x5f\xfd\xf7\x55\xfe\xde\xee\x34\x68\x39\xf5\x7c\x83\x13\x61\x52\x35\x28\x49\xc9\x4d\xb3\x03\xb7\xab\xf1\xb6\x9d\xdf\xdd\xe3\xf2\x99\x0d\x5d\x32\x73\x90\x15\xd2\xda\x6e\xf3\xe6\x76\xc5\xa0\xd4\x3a\xef\xca\xfb\xe7\x07\x36\x9a\xc1\xe5\x11\x40\x0b\x37\x74\x42\xef\xff\xc5\x19\x98\xf8\x49\xef\x62\xe7\x42\x0e\xa4\x0c\x2b\x4b\xa9\x5a\xb0\xfd\x5e\xe5\x24\x4f\xad\x15\x1a\x1a\xe0\xb2\x7a\x65\x40\x3f\xcb\xc3\x81\xc1\x18\x63\x94\xa5\x30\x0a\x85\x88\x39\x9f\xfe\x3f\x4d\x57\x31\x83\x5c\x59\x62\xbe\x7b\x20\x6d\x0b\xf6\xed\x87\x45\xb3\x95\x6d\xbe\x4f\x81\x7a\xc5\x16\xd7\xeb\xe6\x07\xd8\xe2\x8a\x3c\x3e\x7d\x6f\xc2\xa5\x7f\xc1\x56\x16\x3f\xb1\x11\xf1\x66\x82\x1a\xdf\xb9\xe0\xa1\x88\xf8\x94\x47\x64\xf9\x18\x9d\x50\x36\xea\x65\xf3\x16\xcc\x10\xa4\x7f\x82\xa4\xc1\x59\x8e\x69\x40\xb9\xe8\xb3\xd4\x06\xa8\xbd\x10\x82\xe1\x46\x48\x83\xd1\x55\xf1\x27\x00\x00\xff\xff\x43\x00\xc8\x07\x37\x04\x00\x00")

func templatesCat1_reporting_parametersXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_reporting_parametersXml,
		"templates/cat1/_reporting_parameters.xml",
	)
}

func templatesCat1_reporting_parametersXml() (*asset, error) {
	bytes, err := templatesCat1_reporting_parametersXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_reporting_parameters.xml", size: 1079, mode: os.FileMode(420), modTime: time.Unix(1457452730, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1_telecomXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x29\x49\xcd\x49\x4d\xce\xcf\x55\x28\x2d\x4e\xb5\x55\xaa\xae\xd6\x0b\x2d\x4e\xad\xad\x55\x52\x28\x4b\xcc\x29\x05\x0a\x00\x65\xad\xb4\x81\xa2\x61\x20\x2e\x48\x5c\xdf\x8e\x0b\x10\x00\x00\xff\xff\x58\x0a\x19\xbe\x33\x00\x00\x00")

func templatesCat1_telecomXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1_telecomXml,
		"templates/cat1/_telecom.xml",
	)
}

func templatesCat1_telecomXml() (*asset, error) {
	bytes, err := templatesCat1_telecomXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/_telecom.xml", size: 51, mode: os.FileMode(420), modTime: time.Unix(1454511475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCat1Cat1Xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x5b\x6f\xdb\x36\x14\x7e\xf7\xaf\xe0\xf4\xb4\x0d\xd0\xd5\x4e\xe2\x06\x8a\x0b\x37\x4e\x11\x03\x89\x9b\xda\x2e\xb6\x3d\x05\x8c\x44\xdb\x44\x25\xca\xa3\x28\x3b\x5e\x90\xff\xbe\x43\xea\x46\xc9\x97\x64\x5b\x1f\x57\xf8\x41\x3d\x3c\x3c\xd7\xef\x5c\x18\xff\xe3\x73\x1c\xa1\x0d\xe1\x29\x4d\xd8\x95\xe1\x5a\x8e\x81\x08\x0b\x92\x90\xb2\xe5\x95\x91\x89\x85\xd9\x37\x3e\x0e\x3a\xfe\x75\x44\x19\x0d\x70\x34\x4a\x82\x2c\x26\x4c\x20\xb8\xc6\xd2\xcb\xe7\x94\x5e\x19\x2b\x21\xd6\x97\xb6\xbd\xdd\x6e\xad\x6d\xd7\x4a\xf8\xd2\xf6\x1c\xc7\xb5\x7f\xbf\xbf\x9b\x05\x2b\x12\x63\x93\xb2\x54\x60\x16\x10\xa3\x93\x5f\x03\xc1\x9c\x5d\xae\xa2\x0b\x13\x98\x2f\x37\xdd\x92\x7e\xb9\x49\x82\xf6\x99\x0d\xb4\xea\x3c\x0d\x45\x8b\x41\x52\x8c\x41\x07\x21\xff\x27\xd3\x44\x5f\xa7\xa3\x21\xba\x25\x38\x24\x1c\x99\xa6\x22\x73\x82\xa3\xf8\x3a\x09\x09\x02\xa7\xc8\x95\xf1\x6d\x66\xd8\xea\x40\xec\xd6\x64\x1c\x22\x9e\x24\xe2\xca\xf0\x2c\xf7\xdc\xea\xf7\x1c\xcb\xb5\x5c\xb7\xdb\xef\x77\xe1\xa3\x0b\x91\x78\x16\x84\xe5\x91\x79\xf8\x72\x3d\x7a\xbc\x1d\x39\xf0\xaf\xe7\x14\x22\xa4\xca\x6f\x33\x34\x95\x2a\x4a\xb5\x73\x12\xaf\x23\x2c\x08\x02\xd9\x85\x09\xa2\x20\x9d\xd2\xe6\x58\x1e\xfc\x3c\x49\x69\xa8\xf5\x1c\xb7\x67\x3a\xe7\xa6\xf3\xc1\x40\x76\xd3\x4f\x4d\xec\x3f\x56\xd4\x3b\xac\xc8\xf5\x4c\xc7\x6d\x28\x1a\xdd\x9b\x4f\x38\x25\xe1\x8f\x51\xe9\xe9\xb2\xe7\x2b\x9a\x22\xf8\x89\x15\x41\xcb\x28\x79\xc2\x51\xb4\x43\x19\xa3\x7f\x66\x04\xd1\x10\x30\x46\x17\x14\x02\xba\x48\x38\xb0\x00\x9f\xb2\x20\x2c\xf1\x57\xe8\xa7\xa5\xde\x97\x17\xc4\xc8\x76\x8a\x59\x98\xc4\xe8\xf5\xd5\x68\x05\xab\xba\x27\xd3\xae\xa0\x50\x4a\x08\x6a\x6c\x9c\x9d\xb9\x7d\x88\x80\xa1\xfe\x3b\xdb\xa5\xe0\xdc\x21\x87\xce\x65\xe8\x6a\x96\x09\x8e\xe1\xee\xdd\x97\xf1\xe4\xda\x40\x21\x4d\x21\x1e\xbb\x9c\xf6\x35\xc3\x11\x15\x3b\x74\x4f\x70\x9a\x71\x02\x40\x59\x27\x5c\x94\xf8\xa3\x22\x22\x03\x65\xdc\x98\x05\xd2\xe1\xa0\xe4\xf0\xed\xfc\xf0\x50\xa4\x2a\x47\x02\x40\xb6\x80\xd4\x21\x41\xe3\xca\x19\xb2\x58\x90\x40\xd0\x0d\x99\x4b\xe2\x06\x47\x19\x51\xa1\x91\x3c\x93\x64\x5b\x07\x26\x48\xd8\x22\x0f\xb2\x32\x51\x2b\x90\xc9\x5b\xee\x9f\x59\xde\x59\x21\x25\xc2\x6c\x99\xe1\x25\xd1\xae\x13\xa6\x85\x9e\x2b\x77\x00\x3d\x6b\x30\xb5\xce\x1a\x42\x2f\x2f\x25\x70\x90\xf1\xc8\x49\x90\xf0\xf0\x51\x60\xbe\x24\xc2\x82\x4a\x37\x90\x35\x55\xb4\xd7\xd7\x4e\xc1\x4e\x17\xc8\xca\x2b\x0c\x68\x39\x89\x83\x72\x52\x52\xad\x61\x26\x56\x09\x4f\x8b\xd3\x96\x06\xac\x0e\x0b\xd1\x95\x00\xc2\xc2\xe2\x5b\x19\x3b\xbb\x1d\xde\xdd\xa1\x15\xde\x10\xe4\x5a\xd6\xaf\xa8\xb8\x84\xee\x87\x7f\xa0\x27\x08\x3c\xd9\x50\xc8\x10\xa0\x71\x0d\xdd\x32\x61\x56\xa1\x68\x0e\x49\xc9\x59\x51\xb2\x50\x29\xba\xd6\xf1\x46\x59\x8e\x5e\xf2\x8c\xc1\x1c\x22\xd3\x88\x4b\x59\x58\xc8\x6f\x2c\x30\x4a\xb3\xa7\x98\xa6\xb2\x12\xa1\x17\x03\x84\xb9\xcd\xc9\x92\xa6\x82\xef\x2c\x15\xb3\xda\x4a\xa9\x2e\xc8\x52\x01\x1d\x1a\xb3\xc3\x1a\x73\xa0\xa4\x00\x41\x84\xf3\xef\x88\x2c\x71\xa4\xac\x94\x19\x0f\xb0\x00\x63\x0b\xc3\x94\xe4\xd2\x38\xa8\x1e\x99\x33\x4e\x52\xe0\xcb\xaf\xe6\x29\x84\x69\x00\x9e\x2f\x31\xa3\x7f\x29\xd0\x59\x55\x26\xb5\xd0\x55\xa4\xca\xbe\x41\x11\x23\x1f\x83\x6f\x4b\x46\xc2\xeb\xf6\x49\x2b\x51\x0d\x1d\x79\xba\x8a\xfc\x56\x37\xad\x2f\x1a\x4f\x95\x6e\xdf\x3e\xa2\xc2\xb7\x35\x6b\x9a\x61\x3c\x14\x95\x23\x01\x85\x0c\x41\x08\x20\x42\x79\xee\xd1\x76\x95\x28\xb2\x90\xdc\x85\x09\x2a\xe0\xba\x03\x65\xf4\xeb\x74\xb5\xc0\x60\xe5\x95\x4d\x22\xa2\xf4\xc4\xc0\x27\x91\x56\xc4\xff\x74\x8c\x95\xf1\x43\xdd\xf6\x2a\xd8\xfb\xdc\xaa\xdd\xe8\x0d\x41\xaf\x9a\x4a\x80\x25\x9b\x46\xd9\x21\x8e\x4b\x92\x61\xc6\x02\xfa\x99\x56\xf5\x33\xed\x52\x99\x88\x1b\x90\x2b\x76\x75\xa2\x35\x69\xe3\x91\x26\xf0\x70\x2d\xd7\x56\x8d\xc3\xba\xaa\xf7\x00\x43\xc3\x66\x55\xb7\x2b\xfb\x6d\xf1\xc3\x30\x84\x78\xa7\xe4\x84\x12\x9c\xb3\xfc\x57\x4d\x73\x48\x74\x90\xc4\x27\x14\x89\x9c\xe3\x6d\x45\x55\x90\x1f\x14\x1e\x07\x9a\x40\x9f\x01\x0e\x75\x82\xa4\x2d\x61\x24\xb0\xc1\xb1\xbc\xe7\x42\xac\xcf\x94\xa7\xe2\xf5\xd5\xb7\x73\xee\x96\x88\x05\x8e\x69\xb4\x7b\x4b\xc6\x1d\xce\x45\x14\xdc\xba\x5d\x76\xc3\xb0\xba\x60\xdb\x2e\xbc\xb3\x21\x34\xd5\xbf\xd1\x14\x74\x2c\xfa\xf6\xa1\xda\xe9\x48\xc5\x50\x8a\x29\x41\xe5\x50\xc8\xbb\x7a\x71\x49\x9c\x1e\xa8\x5a\x4a\x86\xda\xb5\x02\xf5\xb0\xa5\x68\xab\xd6\xf5\x4e\x56\x78\x6a\x1c\xdf\x98\x3e\x58\x30\x61\xf5\x9a\x93\x42\x26\x0f\x63\x9d\xd4\x94\xf9\x19\x7f\x27\xc0\x70\x5c\x66\xcf\x3a\xd7\x6b\x14\x10\xad\x55\x26\x0c\x1a\x42\x44\x51\x09\x77\x94\x91\x81\xe7\x78\xe8\x53\xc6\x61\xeb\x5f\x0a\xe8\x64\xd3\xd0\xf2\xed\x7d\xae\x5a\x42\x20\xc3\xfb\x89\x84\xb0\xad\x85\xd0\x72\x9b\x85\x0f\xdb\xbf\x20\x83\xfb\xa1\x14\x21\xbf\xea\x93\x75\x02\x94\x48\x36\x92\x81\xe3\x5e\x74\x1d\xdf\xd6\x28\x9a\xf4\x24\x63\x30\x0b\x07\xdf\x66\x20\xbb\xf8\xae\x73\xac\xf9\xe2\x17\x15\x84\xb2\x14\xf2\xf4\xdb\x83\x51\xa6\x0c\xe8\x97\x3f\x5f\xf4\xdd\x5f\xbc\x0b\xd7\xec\xc2\x12\x7f\xa0\x61\xe5\x89\x03\x8f\x47\x6a\x3c\x6b\xfa\x63\xcc\xb2\x05\x0e\x64\xd3\xe3\xf7\x60\x5a\x24\xf7\xbb\x41\x91\x47\xdf\x3e\x78\x8c\xf4\x00\x24\x0b\xb1\xc5\x9c\x34\xaf\xe9\x54\x34\xd8\xc3\x6c\xcb\x1c\x54\xa2\x77\x1f\x67\x40\xab\xbf\x5b\xc3\xf7\xf8\xe8\xf5\xab\x49\xaf\x1d\xea\x75\xa4\x39\x40\x4f\xac\xf7\x0a\xac\x1a\x2f\xd3\x9c\x84\xe7\x10\xcc\xb4\x11\x09\xbe\xb7\xca\xff\x5f\x65\x6a\x0f\xb8\x3f\x02\xba\x6f\x80\xf7\x14\x7c\xdf\x0d\xe0\xd3\x10\xde\x03\xb1\xfd\xbe\xcc\x1c\xd9\x79\x1a\x1b\xcf\x89\x4d\xe1\x1d\x2d\xed\xe4\xa8\x3f\x32\xe8\x6b\xac\x3c\x05\x8e\x8b\xcf\x42\xc8\x22\xee\xf6\xcc\x9e\xd7\x3f\x37\xfb\x5e\x10\x98\xbd\x2e\x79\x72\x7a\xc1\x87\x0b\x0f\x5f\xfc\xdf\x93\x4e\xf7\xa4\xf6\x70\xdc\x9f\xee\xc5\x6c\xbf\x25\x8c\xef\x0e\x8d\xee\x72\x70\xcf\x08\x9c\xec\x0f\xe6\x46\x5d\x1e\x1b\xca\x7a\xab\xf8\xc1\x1d\xa2\xd9\x17\x1a\xd0\x3f\x85\xf8\x1a\x73\x87\xc7\x79\xbd\x32\x75\x5a\x1b\xc5\x9a\x27\x1b\x78\xf9\xf2\xb4\xfd\xd2\x54\x39\x8d\xd7\x09\x03\x31\x25\xfe\x05\xcf\x54\x5b\x0f\x3f\x25\x61\x15\xb4\x86\xb8\x38\x7f\xdb\x97\xd2\x8a\xa7\xfe\x91\x77\x68\xf5\x98\x7a\x5c\x63\x0e\x6e\x8b\xda\x8c\x7a\x69\x81\x59\xff\x30\x9c\x8f\x6f\x26\x73\x34\x1a\xce\x87\x68\x7a\x33\x19\xdd\x4c\x67\xe8\xf6\x66\x7a\x53\xad\xff\xf6\xbe\x69\x12\x86\x95\xf9\x1d\xdf\x6e\xff\xc9\x6e\xd0\xf9\x3b\x00\x00\xff\xff\xe0\x1b\xe0\xc5\xed\x13\x00\x00")

func templatesCat1Cat1XmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesCat1Cat1Xml,
		"templates/cat1/cat1.xml",
	)
}

func templatesCat1Cat1Xml() (*asset, error) {
	bytes, err := templatesCat1Cat1XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cat1/cat1.xml", size: 5101, mode: os.FileMode(420), modTime: time.Unix(1458227107, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hqmfr2_template_oid_mapJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x5a\x5b\x6e\xe3\x38\x10\xfc\xcf\x29\x06\xfe\x1e\x08\xd1\x23\x96\x76\x2e\x23\x30\x12\x65\x13\x2b\x91\x02\x49\x19\xf1\x2e\xe6\x66\x0b\xec\x91\xf6\x0a\x4b\x39\xf1\x63\x3c\x2e\xca\x36\x9b\x41\x10\xd8\x86\x9c\x6a\x36\xab\x8b\xd5\x2d\xfd\xfd\xf2\xed\xdb\x2a\x4b\xd2\x75\x52\x15\xaf\x49\x9a\xa4\x69\x5e\x55\x79\x92\xbe\x26\x99\xfb\xad\x92\x3c\x79\xcb\x57\x3f\xe6\xab\xe6\x9f\x55\xcb\x3b\x21\x85\x15\x4a\xae\x7e\xac\x46\x66\x05\x97\xb6\x6e\xb6\x4c\xb3\xc6\x72\x2d\x8c\x15\xcd\xea\xfb\xf1\x62\x63\x99\x9d\x8c\xbb\xf0\xfc\x91\xe4\x1b\xf6\xf9\xed\x8e\xf5\x86\xff\xfc\xbe\x0c\x5f\x3c\x06\x5f\xbf\x0b\x6d\xb7\x2d\xb3\x9c\x38\x90\x75\x70\x1a\x9a\xde\x7d\xa9\x61\x7d\x6d\xb5\x70\x7f\x47\xa6\xdd\x75\x62\x64\xd2\x06\x25\xe8\xed\xc1\x04\x6d\xb8\x6c\xb9\xa6\xde\xa6\x07\xd3\x53\x73\xbb\x75\xc9\x10\x76\x4f\x1d\x48\xf9\x68\x20\x1f\xa3\xd0\xbc\xa5\x0e\xa3\x7a\x30\x8c\x91\xed\xe9\x37\xe5\x8f\x07\x83\x70\xaf\x49\xca\x66\xe6\xc3\xfc\x16\xd6\x2e\x97\x8d\x9a\xa4\x25\x5f\x71\x06\x69\xe8\x43\x74\x19\x10\x3b\x1e\x94\xe9\x67\x60\x47\xae\x3b\xa5\x87\x4b\xee\x3d\xb1\x62\xc8\x77\x1f\xb4\xd2\x4e\x02\x02\x81\x21\xc3\x7d\xc0\x9a\x37\x6a\x18\x66\x05\x0a\x02\x5f\xe3\x2a\xd7\xaa\xe1\xed\xa4\x6f\xf1\x98\x24\xe1\x6b\xac\x74\x1e\x68\x82\x84\xaf\x71\x35\x1f\x81\x6b\xcd\xcd\xd4\x5b\xea\x93\x0f\x1f\xc1\x27\x60\xd6\xee\xb8\x36\xbc\xe6\x3b\x2e\xc9\xf1\xf1\x09\x77\xc2\x17\xd2\xaa\x9e\x6b\x26\x69\x04\xec\x12\x1d\x2b\xb9\x67\xbf\x89\x78\x9e\x22\xec\x56\xb0\x8d\x54\x46\x98\x28\x72\x96\x42\xaa\xf9\x70\x1d\xf9\x54\xbf\x0b\x5c\x30\x2c\x6c\x1f\x72\xc7\x06\xd1\xef\xeb\xad\x3b\xc5\x94\xde\x07\xe1\xc3\xdd\xf6\xe1\x0b\x49\x90\xf3\xf4\xf5\x19\xe8\x30\x48\xc8\x2f\x94\x51\x9a\x53\x1a\xb6\x14\x5f\x2b\x9d\xbd\x88\xb1\x53\x7b\x0b\xf8\x5e\x11\xff\xef\xdf\x7f\xfc\x41\x40\x55\xb9\x0e\x22\x8e\xaa\x66\x4b\xdb\x7d\xc6\x8f\x29\xae\xd9\x92\xc4\x9c\xc3\x88\xa7\xb1\x59\x16\x40\x08\x0a\x2f\x13\x8d\x90\x56\x4f\xf7\x04\x50\x40\xc1\x75\xff\xd7\xf5\x8c\x87\x37\xbf\x43\xb7\xc2\x8c\x5c\x9a\xb0\xc5\xbf\x41\x06\x78\xb1\x09\xd2\x5e\x40\xb1\x5d\x5a\xf5\xdc\xb7\x6c\x82\xe4\xb6\x80\xa6\xc6\x8b\x1d\xae\xf3\x05\xd4\x1d\x3f\x70\x3b\xb8\x2b\x8d\x0d\xce\x39\xb4\xaf\x67\xf8\xb3\xe0\x74\x1d\x6f\x2c\xf5\xb1\x53\xc0\x33\xfe\x32\x84\xde\x49\xcd\x86\x7c\x3a\x00\x45\xf7\x02\x3a\x9e\xce\xa5\x29\x14\x3a\x31\x0c\x93\x14\x7f\xc5\xde\x7e\xf7\xc9\x93\x11\x1c\xea\x3d\x0c\x1a\x96\xdc\xd2\xe2\xaf\xb9\xf0\x0c\x38\x2c\xbb\x05\xf0\x9b\x6c\x78\xa2\x8d\x80\xcc\x1b\xb7\x7b\x73\x18\x0b\xf2\x0f\x36\x50\x37\x2f\x50\xdb\x97\x50\x29\x1a\x56\x48\xf6\x25\xf0\xbb\x1b\x75\x3f\x3e\x9e\x5c\x2f\xe0\x13\x75\x6f\x90\xef\x3d\x7b\x57\x9a\xcd\xce\xba\xb6\xdc\x50\x5b\xba\x02\xe6\x7d\x19\x97\x64\x44\x92\x43\x37\x73\x15\x40\x54\x67\x5b\xc0\x8a\xbb\x8e\x22\x9e\xe0\x17\xb0\xfe\x96\xb7\x82\xc2\x60\xc1\x0a\x58\x86\x27\xaa\x01\x78\xd6\x37\x4c\xf3\x7a\xa3\x58\x4f\x9c\x72\xe8\x29\xe7\xe5\x4c\xf2\x78\xc8\x77\x5a\x0d\xf5\x71\x0c\x6e\x55\x3d\x6a\xb5\x13\xf4\xf7\x45\x60\x25\xdc\x8a\xe6\x2b\x84\x43\x38\x9f\x91\x51\xfb\x0f\x58\x12\x4b\xe1\xc4\xc9\x0e\x36\x23\x2d\xdf\x89\x9b\xd5\xc8\xc6\xb1\x17\xa1\x1e\xc8\x8f\x1a\x55\x95\xb0\x03\x3c\x82\x47\x31\xbe\xd8\x7b\x7d\xc1\x46\x34\xbd\x78\xd0\x82\x36\x99\x40\xfa\x52\xd8\xe7\x40\x54\x2a\xc5\x83\xa4\x36\xd3\xbb\x03\xbb\x9d\x61\x2a\x83\x5f\x42\xc1\xf5\xa1\x53\x9c\x35\xeb\xa4\x84\x24\x3b\x61\x47\xad\xad\x12\xee\xf9\x19\x3f\x1e\xcf\x4b\xc8\xf3\x8b\xd5\x47\x29\xee\x12\x9e\x79\xbe\x3d\x27\xa2\x7b\x8e\x1b\xca\xf9\x1e\xe0\xbc\xcd\xbf\x8c\x14\x22\xec\x7b\x8e\x1b\xcb\xcb\x10\xe2\x6d\x7d\x8e\x9b\xcb\x8b\x00\xe2\xd4\x5d\x0e\x49\xbf\x80\x4d\x63\xf5\x21\xf5\x7e\x49\x7d\x94\x09\x7a\x0e\xa5\x6e\x61\xe5\x54\x42\x0f\xcd\x9d\xd9\x0f\xa3\x55\xb7\x3a\xcb\xf0\xf9\x61\x05\x3d\x9c\x07\xd5\x18\x6e\x02\xc7\xc4\x15\x74\x4d\x18\x97\xe2\xbe\x58\x05\x0d\x13\xc6\x25\xb9\x13\x89\x1d\x04\x06\x0e\xa2\x33\xdc\xd8\x6e\x92\xcd\xfc\x92\xf5\xf5\x17\x52\xa4\x6a\xce\x20\xa3\xef\x09\x81\x42\xcc\xf0\x0d\xc9\x3b\x02\xa0\x3a\xd1\x20\xe3\x7e\x0b\x22\x8e\xb0\x95\x30\x00\x2d\xcc\x9f\xb5\x6b\xd2\xf8\x66\xee\xdc\x3f\xcb\x7a\x88\x60\xa4\xf0\xb0\xf2\xd8\x14\x1e\xda\x77\xfe\xe1\x68\xe7\xfa\x54\xf2\x03\xf5\x0d\x8f\x0e\x8f\x4f\xae\x45\xc5\xaf\x3c\xcf\x17\xf1\xce\xb1\x7c\x36\x73\x91\x9a\xe2\xca\xf3\x80\xd1\x19\x3b\xca\x7c\xa0\xc4\xe3\xe2\xd3\xbe\xc7\x7c\xd8\xb7\x82\x46\xce\x3a\xdb\x66\xdc\xe2\x0f\xa3\x09\x6a\x54\xe8\xde\x4e\xa8\x56\x3d\x84\xf9\xf2\xf3\xe5\xff\x00\x00\x00\xff\xff\x0f\xaa\xcb\x7f\x59\x2d\x00\x00")

func hqmfr2_template_oid_mapJsonBytes() ([]byte, error) {
	return bindataRead(
		_hqmfr2_template_oid_mapJson,
		"hqmfr2_template_oid_map.json",
	)
}

func hqmfr2_template_oid_mapJson() (*asset, error) {
	bytes, err := hqmfr2_template_oid_mapJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hqmfr2_template_oid_map.json", size: 11609, mode: os.FileMode(420), modTime: time.Unix(1458227107, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hqmf_template_oid_mapJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x9c\xdd\x6e\xe2\x3a\x10\xc7\xef\xfb\x14\x2b\xae\x57\x88\x34\x40\x61\x5f\x26\x72\x13\x07\xac\x93\x2f\xd9\x0e\x2a\x3a\xda\x77\x3f\x09\x2d\xf4\x8b\x49\xfe\x89\x67\xaa\xb3\x17\xab\x2e\xca\xf6\x37\xf6\xfc\x67\x3c\x1e\x3b\xfc\xfb\xf0\xeb\xd7\xe2\x71\x19\x6d\x97\xbb\xf5\x6a\x19\x2d\xa3\x28\xde\xed\xe2\x65\xbc\xdc\x6c\x2f\xff\x5c\xad\xa2\xc5\x9f\xfe\xa1\xfe\xcf\x22\xd3\xb9\xa9\x8c\x37\x75\xb5\xf8\xb3\x68\x94\x37\xba\xf2\x49\x7a\x54\x56\xa5\x5e\x5b\xe3\xbc\x49\x17\xbf\xaf\x0f\x3b\xaf\x7c\xeb\xba\x07\xdf\x3f\xaa\xf4\x41\xbd\xfe\xef\x5c\x15\x4e\xff\xfd\x3d\x4c\x7f\xdc\x4c\x63\x27\xcf\xc6\xfa\x63\xa6\xbc\xe6\xb4\x62\xbd\x5a\xfd\x3f\xcc\x98\xe8\x89\x24\x2d\xba\x47\x52\x55\x24\xde\x9a\xee\xef\x46\xd9\xee\x53\xd3\xa8\xca\xf3\xda\xf5\x38\xd1\xae\x83\xae\x32\x6d\x79\x6d\x88\x27\xda\xa0\xfd\xb1\x9b\x1b\xe3\xcf\xbc\x66\xac\xa7\x9a\xf1\xd2\x18\xab\x33\x5e\x23\xa6\x46\x4d\xa3\xce\xdc\xee\xd8\x4e\x34\xa1\xfb\x99\x37\x58\x28\xbe\xae\xd2\xba\xad\x3c\xef\x78\x77\x64\x64\x0e\xe1\xba\xe1\x9b\x93\x9e\x0d\x7d\xda\xcf\x81\x36\xda\xe6\xb5\x2d\x3f\x4a\x6e\xea\x60\xc9\x50\x1b\xe2\xd6\xb6\x0b\xf9\x10\xea\x2c\x8f\x5a\x9d\xd6\x65\xd9\xa7\x9b\xf9\xe4\x48\x60\xa2\xbd\x6d\xc7\xb9\x3b\x32\xaf\x0a\x73\x99\xd5\x8c\x41\xb9\x55\x85\x51\x25\x54\x05\x91\xe9\x95\x62\x6a\x86\x42\x70\x74\x3a\xb6\x75\xaa\xb3\xd6\xde\x4b\xbe\xe1\xa9\x62\x4b\x57\x06\x03\xdc\xd0\x54\xb1\xa5\x6b\x81\x2b\x35\xb1\xda\xb5\x05\x6b\x19\xb4\xa5\x8b\xc4\x1b\x55\x65\x27\x6d\x9d\x4e\xf4\x49\xf3\xd6\x60\x5b\xba\x34\xbc\xc1\x4d\xe5\xeb\x42\x5b\x55\xf1\xae\xb4\xfb\x59\x3e\x66\x49\xcc\xec\xf2\x82\x22\x97\x5d\x5e\x18\x55\x48\x5e\x18\x5c\x44\x5e\x58\x9e\xe4\x4f\x5d\x10\x57\x44\xd6\x08\x99\xe4\x66\x46\x1d\xaa\xda\x19\xc7\x5f\x4a\x3e\x92\x8b\xd1\x10\xb4\x13\x79\x5d\x9c\x02\x02\x38\x9e\x35\xd6\x5c\x95\xa6\x38\x27\xc7\x6e\xe3\x50\xdb\xf3\xfc\x31\x93\x61\x3c\x04\x37\x55\xe0\x54\xc7\xe3\xd8\xa4\xdb\x13\xfd\x93\xd4\x39\x67\x96\x8e\xf8\x5d\x0c\x85\x91\x94\x8b\x21\x38\xbf\x8b\xb1\x94\xc5\x1c\xc2\xd8\x44\xb3\xeb\x0a\xc1\x8e\x41\xfb\xad\xbd\xf3\x6d\x76\xaf\xcb\x12\x5e\x5e\x46\xe4\xb2\xf4\x15\x2f\x50\xef\xc5\x3b\x18\x2e\x56\xf6\xc5\xe4\xce\xf4\x9b\x0d\x42\xd5\xdf\x9a\x2c\x4b\x00\x05\x84\x16\xfa\x11\xdd\xf5\x0b\xd5\x1f\x16\x73\xb2\x12\xc0\x6c\x90\x94\x00\x64\x81\x94\x04\x20\xb8\x54\x0a\x40\xe0\xa4\xf7\x3b\x4d\x99\xf4\xf5\x17\x7d\xa7\x65\xc6\x35\xba\x72\x41\x0d\xa9\x59\xe0\xe0\x68\xdb\x93\x52\x1b\x1b\x70\xdf\xec\x3d\x04\x94\xa7\xf4\x01\xcc\x7c\x32\x16\x5d\xb3\xb8\x81\x25\x62\x44\x96\x6a\xc3\xd4\xac\xec\x9e\x74\x3e\xc8\xc9\x80\xb4\xde\x73\x59\x9e\xeb\xd4\xdf\xab\x65\xe6\x0f\x1d\xc1\x17\x5d\x12\x3b\xb0\x9e\xdb\x44\xe4\x89\xc9\x07\xae\xd0\x0a\xfa\x34\x2f\x9a\xe7\x4a\xfa\x69\x5e\xd6\x0a\xcd\xd3\x2b\x81\x64\x89\x2d\x10\xdc\x21\x8c\x0d\x57\x2e\x8e\x30\x3e\x7f\x20\x61\xb3\x2d\x13\x48\x18\x5b\x26\x6d\x62\xe7\x08\x64\xb3\xe8\x78\x76\x97\x23\x78\xfd\xa2\x4a\xce\xb4\xb1\xa1\xfb\x62\x23\xc8\xd0\x3a\x60\x43\x6a\x7b\x8c\x1c\xbe\xe3\xdb\xd3\x8d\xc8\x11\x36\x4b\xc3\x59\x64\xd2\x21\x81\x09\x4d\x3a\xd6\x0a\x95\x9a\x74\x2c\xac\x59\x63\x0b\xeb\x1b\x51\xc4\x42\x3d\xd7\x56\xf5\x3d\xa9\xc4\x6b\xc7\xba\x95\x27\x13\xe7\x38\x33\x3c\xac\xd6\xe4\x1c\x7f\xa1\xcb\xb5\x32\xd6\xe4\xe6\xe2\xab\x09\x42\x75\xd8\x86\xdc\x63\x8c\x7b\x20\x34\xa5\xee\x03\xd8\x2c\x89\x8d\x5b\xf2\x58\xe3\x40\x54\x75\x98\x09\x82\xaa\xc3\xf2\xba\x8c\xea\xb0\xbc\x2e\xa7\x3a\xac\x48\x95\xca\x79\x08\x9d\x74\x7c\xaa\xac\x4e\x0e\xb5\x2a\x58\x37\x98\x2b\x36\x1e\xd4\x96\x27\x3d\xdb\x7b\xad\xad\xae\x95\x78\x6e\xeb\x32\xb9\xde\xc8\xf3\x75\xd2\xd8\xfa\x64\x98\xaf\x66\xc6\x64\xf5\x70\xcf\x96\x37\x03\x2e\xc6\xbc\xda\xc5\x69\xcb\x23\xed\x85\x11\x5b\x04\x26\x26\xfa\x21\x2f\x61\x8d\xae\x9f\xf1\x12\x56\x7e\xfd\x90\x97\xb0\x24\x45\xf6\x97\xf5\xc9\xdc\x5d\x0b\x54\xd3\x14\x26\xe4\x54\x9c\x3e\xa9\xbd\x20\x05\x8f\x93\xc8\x84\x7c\x25\xf3\xb7\xde\x62\x72\x4b\xf5\xc6\x14\x2a\xf7\x62\x72\x43\x45\x3a\x36\xf8\x0a\xeb\x74\x2d\xb1\x14\x77\x22\x82\xc2\xb2\x0a\xaf\xa0\x30\x26\xbf\xa0\x30\x2e\xab\xa0\xb0\xae\x13\xbb\xa0\xb0\x1d\x39\x6b\x4e\x84\xae\xaf\x92\x0a\x76\xed\x73\x07\xb9\xef\x4a\x96\x03\x91\x2d\xb9\x49\x19\x42\x07\x5f\x61\x25\x03\xe7\x46\x15\xbc\x4c\x4a\x2a\xf9\x1d\x2e\x94\x95\xb7\x64\xf0\x7e\x18\x37\xff\x22\xb4\x27\x0f\x09\x86\x9c\xcc\x73\x87\x55\xc8\xd3\xd8\xbd\x4e\x11\x4f\x63\x68\x91\x90\xc6\xd0\xdc\x21\x8d\xed\xb6\x25\x34\x86\x8d\x97\x3d\xa8\x10\xec\x9a\x1c\xaf\xe9\x5f\x6e\xe8\xa5\xfc\xe9\x10\x8c\xbd\xa1\x48\x0a\xec\x13\x5f\xea\x5e\x14\x19\xd6\x1f\xe9\x02\x2b\xc7\x9a\x74\xf6\x08\x98\xa1\x8b\x4c\x66\x93\x4f\x33\xce\x7f\x15\x6f\x47\x6e\x18\x47\xc6\xcc\x92\xc1\x05\x85\x8e\xf5\x30\xa5\x84\x8e\xd1\x05\x84\x8e\x81\x45\x84\x8e\xa1\x05\x84\x8e\x15\xfc\x42\x42\x87\x6a\x70\x92\xed\xce\x65\xe3\xeb\x7b\x27\x70\xa1\x6f\xb8\x92\x1b\x8d\x01\xa4\x73\xda\x85\xdc\xae\xdb\xd3\x35\x11\x09\x0d\x7e\x2b\x60\x4f\x97\x24\x24\x34\xf8\xf5\x8b\x88\xd7\xa5\x90\x82\xb9\x5d\x8a\x95\x5e\xcc\x2e\xc5\xa0\xcc\x2e\x85\x6a\x2e\xb2\x8b\x9b\xb7\x55\xda\xff\xa8\x8a\xe4\x8d\xc6\xb9\xfe\x92\x6b\x00\x82\x65\x78\x23\x9d\x5c\x0a\x10\x7e\x70\x5b\x8f\x54\x17\x42\xe7\x28\x41\x76\xa4\xd4\xbe\x59\x20\x50\x7d\x45\x82\xee\xc7\x56\x45\x29\xf7\x63\x74\x49\xf7\x63\x16\x48\xb9\x1f\x2b\x86\xd8\x73\x0e\xf4\x96\x24\x49\xbd\xbc\xe4\x94\x2a\xaf\x0f\xfd\xf1\xf1\xeb\xda\x51\x32\xef\x2d\x23\x31\x3c\x34\x76\xfa\x46\xd4\xf5\x30\xec\x72\xa8\xac\x5f\xba\xd8\x32\x9a\x79\x67\x1b\x89\xe1\xa1\x63\xfb\xf1\x2f\x96\x11\x1c\xba\x14\x1d\x19\xf9\x86\x2c\xd6\x1a\xab\xf3\x2e\x85\xf5\x6d\x1c\x89\x73\xea\xcd\x80\xbf\xdf\xc1\xfc\x87\xf5\x7b\xba\x43\x78\x76\x5e\x97\x82\xdf\x3b\x16\xc9\xb0\x21\x81\xd3\x5f\xde\x74\x8b\x2e\xc1\x71\x0b\xd1\xa1\x37\x13\xc8\x9c\xea\xad\xaa\x5c\xa7\xb4\xcb\x89\x3f\xe7\x78\x9f\xc8\x6b\x6f\x37\xa4\xaf\x59\x27\x98\x77\x90\xd8\x96\x8b\x71\x90\x17\xe0\xc3\xdf\x87\xff\x02\x00\x00\xff\xff\xc4\x9a\x8a\xb6\x36\x50\x00\x00")

func hqmf_template_oid_mapJsonBytes() ([]byte, error) {
	return bindataRead(
		_hqmf_template_oid_mapJson,
		"hqmf_template_oid_map.json",
	)
}

func hqmf_template_oid_mapJson() (*asset, error) {
	bytes, err := hqmf_template_oid_mapJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hqmf_template_oid_map.json", size: 20534, mode: os.FileMode(420), modTime: time.Unix(1460404381, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cat1/_address.xml": templatesCat1_addressXml,
	"templates/cat1/_author.xml": templatesCat1_authorXml,
	"templates/cat1/_id.xml": templatesCat1_idXml,
	"templates/cat1/_measures.xml": templatesCat1_measuresXml,
	"templates/cat1/_organization.xml": templatesCat1_organizationXml,
	"templates/cat1/_providers.xml": templatesCat1_providersXml,
	"templates/cat1/_record_target.xml": templatesCat1_record_targetXml,
	"templates/cat1/_reporting_parameters.xml": templatesCat1_reporting_parametersXml,
	"templates/cat1/_telecom.xml": templatesCat1_telecomXml,
	"templates/cat1/cat1.xml": templatesCat1Cat1Xml,
	"hqmfr2_template_oid_map.json": hqmfr2_template_oid_mapJson,
	"hqmf_template_oid_map.json": hqmf_template_oid_mapJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"hqmf_template_oid_map.json": &bintree{hqmf_template_oid_mapJson, map[string]*bintree{}},
	"hqmfr2_template_oid_map.json": &bintree{hqmfr2_template_oid_mapJson, map[string]*bintree{}},
	"templates": &bintree{nil, map[string]*bintree{
		"cat1": &bintree{nil, map[string]*bintree{
			"_address.xml": &bintree{templatesCat1_addressXml, map[string]*bintree{}},
			"_author.xml": &bintree{templatesCat1_authorXml, map[string]*bintree{}},
			"_id.xml": &bintree{templatesCat1_idXml, map[string]*bintree{}},
			"_measures.xml": &bintree{templatesCat1_measuresXml, map[string]*bintree{}},
			"_organization.xml": &bintree{templatesCat1_organizationXml, map[string]*bintree{}},
			"_providers.xml": &bintree{templatesCat1_providersXml, map[string]*bintree{}},
			"_record_target.xml": &bintree{templatesCat1_record_targetXml, map[string]*bintree{}},
			"_reporting_parameters.xml": &bintree{templatesCat1_reporting_parametersXml, map[string]*bintree{}},
			"_telecom.xml": &bintree{templatesCat1_telecomXml, map[string]*bintree{}},
			"cat1.xml": &bintree{templatesCat1Cat1Xml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

