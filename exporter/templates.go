// Code generated by go-bindata.
// sources:
// exporter/templates/cat1/_.xml
// exporter/templates/cat1/_2.16.840.1.113883.10.20.24.3.23.xml
// exporter/templates/cat1/_address.xml
// exporter/templates/cat1/_author.xml
// exporter/templates/cat1/_id.xml
// exporter/templates/cat1/_measures.xml
// exporter/templates/cat1/_organization.xml
// exporter/templates/cat1/_patient_data.xml
// exporter/templates/cat1/_providers.xml
// exporter/templates/cat1/_record_target.xml
// exporter/templates/cat1/_reporting_parameters.xml
// exporter/templates/cat1/_telecom.xml
// exporter/templates/cat1/cat1.xml
// exporter/hqmfr2_template_oid_map.json
// exporter/hqmf_template_oid_map.json
// exporter/hqmf_qrda_oids.json
// DO NOT EDIT!

package exporter

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// templatesCat1_Xml reads file data from disk. It returns an error on failure.
func templatesCat1_Xml() (*asset, error) {
	path := "/Users/jeaton/Documents/create/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/_.xml"
	name := "templates/cat1/_.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesCat1_2168401113883102024323Xml reads file data from disk. It returns an error on failure.
func templatesCat1_2168401113883102024323Xml() (*asset, error) {
	path := "/Users/jeaton/Documents/create/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/_2.16.840.1.113883.10.20.24.3.23.xml"
	name := "templates/cat1/_2.16.840.1.113883.10.20.24.3.23.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesCat1_addressXml reads file data from disk. It returns an error on failure.
func templatesCat1_addressXml() (*asset, error) {
	path := "/Users/jeaton/Documents/create/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/_address.xml"
	name := "templates/cat1/_address.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesCat1_authorXml reads file data from disk. It returns an error on failure.
func templatesCat1_authorXml() (*asset, error) {
	path := "/Users/jeaton/Documents/create/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/_author.xml"
	name := "templates/cat1/_author.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesCat1_idXml reads file data from disk. It returns an error on failure.
func templatesCat1_idXml() (*asset, error) {
	path := "/Users/jeaton/Documents/create/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/_id.xml"
	name := "templates/cat1/_id.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesCat1_measuresXml reads file data from disk. It returns an error on failure.
func templatesCat1_measuresXml() (*asset, error) {
	path := "/Users/jeaton/Documents/create/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/_measures.xml"
	name := "templates/cat1/_measures.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesCat1_organizationXml reads file data from disk. It returns an error on failure.
func templatesCat1_organizationXml() (*asset, error) {
	path := "/Users/jeaton/Documents/create/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/_organization.xml"
	name := "templates/cat1/_organization.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesCat1_patient_dataXml reads file data from disk. It returns an error on failure.
func templatesCat1_patient_dataXml() (*asset, error) {
	path := "/Users/jeaton/Documents/create/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/_patient_data.xml"
	name := "templates/cat1/_patient_data.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesCat1_providersXml reads file data from disk. It returns an error on failure.
func templatesCat1_providersXml() (*asset, error) {
	path := "/Users/jeaton/Documents/create/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/_providers.xml"
	name := "templates/cat1/_providers.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesCat1_record_targetXml reads file data from disk. It returns an error on failure.
func templatesCat1_record_targetXml() (*asset, error) {
	path := "/Users/jeaton/Documents/create/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/_record_target.xml"
	name := "templates/cat1/_record_target.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesCat1_reporting_parametersXml reads file data from disk. It returns an error on failure.
func templatesCat1_reporting_parametersXml() (*asset, error) {
	path := "/Users/jeaton/Documents/create/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/_reporting_parameters.xml"
	name := "templates/cat1/_reporting_parameters.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesCat1_telecomXml reads file data from disk. It returns an error on failure.
func templatesCat1_telecomXml() (*asset, error) {
	path := "/Users/jeaton/Documents/create/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/_telecom.xml"
	name := "templates/cat1/_telecom.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesCat1Cat1Xml reads file data from disk. It returns an error on failure.
func templatesCat1Cat1Xml() (*asset, error) {
	path := "/Users/jeaton/Documents/create/go/src/github.com/projectcypress/cdatools/exporter/templates/cat1/cat1.xml"
	name := "templates/cat1/cat1.xml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// hqmfr2_template_oid_mapJson reads file data from disk. It returns an error on failure.
func hqmfr2_template_oid_mapJson() (*asset, error) {
	path := "/Users/jeaton/Documents/create/go/src/github.com/projectcypress/cdatools/exporter/hqmfr2_template_oid_map.json"
	name := "hqmfr2_template_oid_map.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// hqmf_template_oid_mapJson reads file data from disk. It returns an error on failure.
func hqmf_template_oid_mapJson() (*asset, error) {
	path := "/Users/jeaton/Documents/create/go/src/github.com/projectcypress/cdatools/exporter/hqmf_template_oid_map.json"
	name := "hqmf_template_oid_map.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// hqmf_qrda_oidsJson reads file data from disk. It returns an error on failure.
func hqmf_qrda_oidsJson() (*asset, error) {
	path := "/Users/jeaton/Documents/create/go/src/github.com/projectcypress/cdatools/exporter/hqmf_qrda_oids.json"
	name := "hqmf_qrda_oids.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cat1/_.xml": templatesCat1_Xml,
	"templates/cat1/_2.16.840.1.113883.10.20.24.3.23.xml": templatesCat1_2168401113883102024323Xml,
	"templates/cat1/_address.xml": templatesCat1_addressXml,
	"templates/cat1/_author.xml": templatesCat1_authorXml,
	"templates/cat1/_id.xml": templatesCat1_idXml,
	"templates/cat1/_measures.xml": templatesCat1_measuresXml,
	"templates/cat1/_organization.xml": templatesCat1_organizationXml,
	"templates/cat1/_patient_data.xml": templatesCat1_patient_dataXml,
	"templates/cat1/_providers.xml": templatesCat1_providersXml,
	"templates/cat1/_record_target.xml": templatesCat1_record_targetXml,
	"templates/cat1/_reporting_parameters.xml": templatesCat1_reporting_parametersXml,
	"templates/cat1/_telecom.xml": templatesCat1_telecomXml,
	"templates/cat1/cat1.xml": templatesCat1Cat1Xml,
	"hqmfr2_template_oid_map.json": hqmfr2_template_oid_mapJson,
	"hqmf_template_oid_map.json": hqmf_template_oid_mapJson,
	"hqmf_qrda_oids.json": hqmf_qrda_oidsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"hqmf_qrda_oids.json": &bintree{hqmf_qrda_oidsJson, map[string]*bintree{}},
	"hqmf_template_oid_map.json": &bintree{hqmf_template_oid_mapJson, map[string]*bintree{}},
	"hqmfr2_template_oid_map.json": &bintree{hqmfr2_template_oid_mapJson, map[string]*bintree{}},
	"templates": &bintree{nil, map[string]*bintree{
		"cat1": &bintree{nil, map[string]*bintree{
			"_.xml": &bintree{templatesCat1_Xml, map[string]*bintree{}},
			"_2.16.840.1.113883.10.20.24.3.23.xml": &bintree{templatesCat1_2168401113883102024323Xml, map[string]*bintree{}},
			"_address.xml": &bintree{templatesCat1_addressXml, map[string]*bintree{}},
			"_author.xml": &bintree{templatesCat1_authorXml, map[string]*bintree{}},
			"_id.xml": &bintree{templatesCat1_idXml, map[string]*bintree{}},
			"_measures.xml": &bintree{templatesCat1_measuresXml, map[string]*bintree{}},
			"_organization.xml": &bintree{templatesCat1_organizationXml, map[string]*bintree{}},
			"_patient_data.xml": &bintree{templatesCat1_patient_dataXml, map[string]*bintree{}},
			"_providers.xml": &bintree{templatesCat1_providersXml, map[string]*bintree{}},
			"_record_target.xml": &bintree{templatesCat1_record_targetXml, map[string]*bintree{}},
			"_reporting_parameters.xml": &bintree{templatesCat1_reporting_parametersXml, map[string]*bintree{}},
			"_telecom.xml": &bintree{templatesCat1_telecomXml, map[string]*bintree{}},
			"cat1.xml": &bintree{templatesCat1Cat1Xml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

